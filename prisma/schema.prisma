datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Resume {
  id             Int              @id @default(autoincrement())
  userId         String          
  fullName       String
  email          String
  phone          String?
  address        String?
  linkedIn       String?
  website        String?
  summary        String?
  workExperiences WorkExperience[]
  educations     Education[]
  skills         Skill[]          // Implicit many-to-many
  languages      Language[]       // Implicit many-to-many
  certifications Certification[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model WorkExperience {
  id          Int      @id @default(autoincrement())
  resumeId    Int      @map("resume_id")
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobTitle    String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Education {
  id             Int      @id @default(autoincrement())
  resumeId       Int      @map("resume_id")
  resume         Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  degree         String
  major          String?
  institution    String
  graduationYear Int?
  gpa            Float?
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Skill {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  resumes   Resume[]      // Implicit many-to-many
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Language {
  id          Int           @id @default(autoincrement())
  name        String
  proficiency String
  resumes     Resume[]      // Implicit many-to-many
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  @@unique([name, proficiency])
}

model Certification {
  id           Int      @id @default(autoincrement())
  resumeId     Int      @map("resume_id")
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name         String
  issuer       String
  issueDate    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CoverLetter {
  id        Int      @id @default(autoincrement())
  userId    String
  content   String   // Required
  fullName  String?
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id            Int       @id @default(autoincrement())
  userId        String
  position      String    // Required: Job Position
  company       String    // Required: Company
  location      String    // Required: Location
  maxSalary     Float?    // Optional: Max salary
  status        String?   // Optional: Application status
  deadline      DateTime? // Optional: Application deadline
  dateApplied   DateTime? // Optional: Date applied
  followUp      DateTime? // Optional: Follow up date
  comment       String?   // Optional: Additional comments
  jobUrl        String?   // Optional: Job posting URL
  description   String?   // Optional: Job description
  notes         String?   // Optional: Notes
  interviewDate DateTime? // Optional: Interview date
  contactPerson String?   // Optional: Contact person
  contactEmail  String?   // Optional: Contact email
  contactPhone  String?   // Optional: Contact phone
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  stripeCustomerId  String?  @unique
  subscriptionId    String?  @unique
  subscriptionStatus String? // active, inactive, canceled, past_due
  planType          String   @default("free") // free, premium
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}